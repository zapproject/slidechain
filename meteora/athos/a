import hashlib
import time

class Block:
    def __init__(self, timestamp, data, previous_hash=''):
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.calculate_hash()
        self.is_fork_block = False  # Flag for fork block

    def calculate_hash(self):
        return hashlib.sha256(f"{self.previous_hash}{self.timestamp}{self.data}{self.nonce}".encode()).hexdigest()

    def mine_block(self, difficulty):
        while self.hash[:difficulty] != '0' * difficulty:
            self.nonce += 1
            self.hash = self.calculate_hash()

# Create Genesis Block
genesis_block = Block(time.time(), "Genesis Block")

# Forked Block Header Creation
def create_forked_block_header(block):
    if block.is_fork_block:
        return f"Forked Block Header: {block.hash}"
    else:
        return "This block is not a fork block."

# Chain Validation Function
def validate_chain(chain):
    for i in range(1, len(chain)):
        current_block = chain[i]
        previous_block = chain[i - 1]

        if current_block.hash != current_block.calculate_hash():
            return False

        if current_block.previous_hash != previous_block.hash:
            return False

    return True

# Example usage
blockchain = [genesis_block]
new_block = Block(time.time(), "Block 2", genesis_block.hash)
blockchain.append(new_block)

print(f"Is blockchain valid? {validate_chain(blockchain)}")
